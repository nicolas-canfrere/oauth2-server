security:
    # Password hashing configuration
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: bcrypt
            cost: 12

    # User providers
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            id: App\Security\UserProvider

    # Firewalls
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # OAuth2 endpoints firewall
        oauth:
            pattern: ^/oauth
            stateless: true
            custom_authenticators:
                - App\Security\OAuth2ClientAuthenticator

        # Admin interface firewall
        admin:
            pattern: ^/admin
            lazy: true
            stateless: false
            provider: app_user_provider
            json_login:
                check_path: admin_login
                username_path: email
                password_path: password
            logout:
                path: admin_logout

        # API firewall (protected by OAuth2 tokens)
        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
            # Will be configured with JWT authentication later

        # Main firewall
        main:
            lazy: true
            provider: app_user_provider

    # Access control
    # Note: Only the *first* access control that matches will be used
    access_control:
        # OAuth2 token endpoint is public
        - { path: ^/oauth/token, roles: PUBLIC_ACCESS }
        # OAuth2 authorize endpoint requires authentication
        - { path: ^/oauth/authorize, roles: ROLE_USER }
        # Admin login is public
        - { path: ^/admin/login, roles: PUBLIC_ACCESS }
        # Admin area requires ROLE_ADMIN
        - { path: ^/admin, roles: ROLE_ADMIN }
        # API requires authentication (will be refined later)
        - { path: ^/api, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
